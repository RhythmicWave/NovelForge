/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Projects Endpoint */
        get: operations["get_projects_endpoint_api_projects__get"];
        put?: never;
        /** Create Project Endpoint */
        post: operations["create_project_endpoint_api_projects__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Project Endpoint */
        get: operations["get_project_endpoint_api_projects__project_id__get"];
        /** Update Project Endpoint */
        put: operations["update_project_endpoint_api_projects__project_id__put"];
        post?: never;
        /** Delete Project Endpoint */
        delete: operations["delete_project_endpoint_api_projects__project_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/llm-configs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Llm Configs Endpoint */
        get: operations["get_llm_configs_endpoint_api_llm_configs__get"];
        put?: never;
        /** Create Llm Config Endpoint */
        post: operations["create_llm_config_endpoint_api_llm_configs__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/llm-configs/{config_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Llm Config Endpoint */
        put: operations["update_llm_config_endpoint_api_llm_configs__config_id__put"];
        post?: never;
        /** Delete Llm Config Endpoint */
        delete: operations["delete_llm_config_endpoint_api_llm_configs__config_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/llm-configs/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test Llm Connection Endpoint */
        post: operations["test_llm_connection_endpoint_api_llm_configs_test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chapters/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 创建新章节 */
        post: operations["create_chapter_api_chapters__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chapters/by_volume/{volume_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 根据分卷获取章节列表 */
        get: operations["get_chapters_by_volume_api_chapters_by_volume__volume_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chapters/{chapter_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取单个章节 */
        get: operations["get_chapter_api_chapters__chapter_id__get"];
        /** 更新章节 */
        put: operations["update_chapter_api_chapters__chapter_id__put"];
        post?: never;
        /** 删除章节 */
        delete: operations["delete_chapter_endpoint_api_chapters__chapter_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/schemas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 获取所有卡片内容模型的JSON Schema
         * @description 返回一个包含 RESPONSE_MODEL_MAP 中所有Pydantic模型及其所有依赖的JSON Schema的字典。
         *     这为前端动态表单渲染提供了所有必要的模型定义。
         */
        get: operations["get_all_schemas_api_ai_schemas_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/content-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 获取所有可用于卡片内容的模型名称
         * @description 返回一个包含所有已在RESPONSE_MODEL_MAP中注册的Pydantic模型名称的列表。
         */
        get: operations["get_content_models_api_ai_content_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/config-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 获取AI生成配置选项
         * @description 获取AI生成时可用的配置选项
         */
        get: operations["get_ai_config_options_api_ai_config_options_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 通用AI生成接口
         * @description 一个通用的AI内容生成端点。
         *     它接收一个输入、LLM配置、提示词和响应模型，然后返回结构化的输出。
         */
        post: operations["generate_ai_content_api_ai_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/generate/continuation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 续写正文 */
        post: operations["generate_continuation_api_ai_generate_continuation_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/models/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 导出 Tags 模型（用于类型生成） */
        get: operations["export_tags_model_api_ai_models_tags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 获取提示词列表
         * @description 获取所有提示词模板的列表。
         */
        get: operations["read_prompts_api_prompts__get"];
        put?: never;
        /**
         * 创建新提示词
         * @description 创建一个新的提示词模板。
         */
        post: operations["create_prompt_api_prompts__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/{prompt_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 获取单个提示词
         * @description 根据ID获取单个提示词模板的详细信息。
         */
        get: operations["read_prompt_api_prompts__prompt_id__get"];
        /**
         * 更新提示词
         * @description 更新一个已存在的提示词模板。
         */
        put: operations["update_prompt_api_prompts__prompt_id__put"];
        post?: never;
        /**
         * 删除提示词
         * @description 删除一个提示词模板。
         */
        delete: operations["delete_prompt_api_prompts__prompt_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/card-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Card Types */
        get: operations["get_all_card_types_api_card_types_get"];
        put?: never;
        /** Create Card Type */
        post: operations["create_card_type_api_card_types_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/card-types/{card_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Card Type */
        get: operations["get_card_type_api_card_types__card_type_id__get"];
        /** Update Card Type */
        put: operations["update_card_type_api_card_types__card_type_id__put"];
        post?: never;
        /** Delete Card Type */
        delete: operations["delete_card_type_api_card_types__card_type_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{project_id}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Cards For Project */
        get: operations["get_all_cards_for_project_api_projects__project_id__cards_get"];
        put?: never;
        /** Create Card For Project */
        post: operations["create_card_for_project_api_projects__project_id__cards_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cards/{card_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Card */
        get: operations["get_card_api_cards__card_id__get"];
        /** Update Card */
        put: operations["update_card_api_cards__card_id__put"];
        post?: never;
        /** Delete Card */
        delete: operations["delete_card_api_cards__card_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Root */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ApiResponse */
        ApiResponse: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: unknown | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[ChapterRead] */
        ApiResponse_ChapterRead_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["ChapterRead"] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[ContinuationResponse] */
        ApiResponse_ContinuationResponse_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["ContinuationResponse"] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[LLMConfigRead] */
        ApiResponse_LLMConfigRead_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["LLMConfigRead"] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[List[ChapterRead]] */
        ApiResponse_List_ChapterRead__: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: components["schemas"]["ChapterRead"][] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[List[LLMConfigRead]] */
        ApiResponse_List_LLMConfigRead__: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: components["schemas"]["LLMConfigRead"][] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[List[ProjectRead]] */
        ApiResponse_List_ProjectRead__: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: components["schemas"]["ProjectRead"][] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[List[PromptRead]] */
        ApiResponse_List_PromptRead__: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: components["schemas"]["PromptRead"][] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[ProjectRead] */
        ApiResponse_ProjectRead_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["ProjectRead"] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[PromptRead] */
        ApiResponse_PromptRead_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["PromptRead"] | null;
            /** Message */
            message?: string | null;
        };
        /** CardCreate */
        CardCreate: {
            /** Title */
            title: string;
            /** Content */
            content?: Record<string, never> | null;
            /** Parent Id */
            parent_id?: number | null;
            /** Card Type Id */
            card_type_id: number;
        };
        /** CardRead */
        CardRead: {
            /** Title */
            title: string;
            /** Content */
            content?: Record<string, never> | null;
            /** Parent Id */
            parent_id?: number | null;
            /** Card Type Id */
            card_type_id: number;
            /** Id */
            id: number;
            /** Project Id */
            project_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Display Order */
            display_order: number;
            card_type: components["schemas"]["CardTypeRead"];
            /** Ai Context Template */
            ai_context_template?: string | null;
            /** Selected Ai Param Card Id */
            selected_ai_param_card_id?: string | null;
        };
        /** CardTypeCreate */
        CardTypeCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Model Name */
            model_name?: string | null;
            /** Editor Component */
            editor_component?: string | null;
            /**
             * Is Ai Enabled
             * @default false
             */
            is_ai_enabled: boolean;
            /**
             * Is Singleton
             * @default false
             */
            is_singleton: boolean;
            /** Default Ai Context Template */
            default_ai_context_template?: string | null;
            /** Json Schema */
            json_schema?: Record<string, never> | null;
            /** Ui Layout */
            ui_layout?: Record<string, never> | null;
        };
        /** CardTypeRead */
        CardTypeRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Model Name */
            model_name?: string | null;
            /** Editor Component */
            editor_component?: string | null;
            /**
             * Is Ai Enabled
             * @default false
             */
            is_ai_enabled: boolean;
            /**
             * Is Singleton
             * @default false
             */
            is_singleton: boolean;
            /** Default Ai Context Template */
            default_ai_context_template?: string | null;
            /** Json Schema */
            json_schema?: Record<string, never> | null;
            /** Ui Layout */
            ui_layout?: Record<string, never> | null;
            /** Id */
            id: number;
        };
        /** CardTypeUpdate */
        CardTypeUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Model Name */
            model_name?: string | null;
            /** Editor Component */
            editor_component?: string | null;
            /** Is Ai Enabled */
            is_ai_enabled?: boolean | null;
            /** Is Singleton */
            is_singleton?: boolean | null;
            /** Default Ai Context Template */
            default_ai_context_template?: string | null;
            /** Json Schema */
            json_schema?: Record<string, never> | null;
            /** Ui Layout */
            ui_layout?: Record<string, never> | null;
        };
        /** CardUpdate */
        CardUpdate: {
            /** Title */
            title?: string | null;
            /** Content */
            content?: Record<string, never> | null;
            /** Parent Id */
            parent_id?: number | null;
            /** Display Order */
            display_order?: number | null;
            /** Ai Context Template */
            ai_context_template?: string | null;
            /** Selected Ai Param Card Id */
            selected_ai_param_card_id?: string | null;
        };
        /** ChapterCreate */
        ChapterCreate: {
            /** Title */
            title: string;
            /** Content */
            content?: string | null;
            /**
             * Word Count
             * @default 0
             */
            word_count: number;
            /** Outline */
            outline?: Record<string, never> | null;
        };
        /** ChapterRead */
        ChapterRead: {
            /** Title */
            title: string;
            /** Content */
            content?: string | null;
            /**
             * Word Count
             * @default 0
             */
            word_count: number;
            /** Outline */
            outline?: Record<string, never> | null;
            /** Id */
            id: number;
            /** Volume Id */
            volume_id?: number | null;
        };
        /** ChapterUpdate */
        ChapterUpdate: {
            /** Title */
            title?: string | null;
            /** Content */
            content?: string | null;
            /** Word Count */
            word_count?: number | null;
            /** Outline */
            outline?: Record<string, never> | null;
        };
        /** ContinuationRequest */
        ContinuationRequest: {
            /** Previous Content */
            previous_content: string;
            /** Llm Config Id */
            llm_config_id: number;
            /**
             * Stream
             * @default false
             */
            stream: boolean;
        };
        /** ContinuationResponse */
        ContinuationResponse: {
            /** Content */
            content: string;
        };
        /** GeneralAIRequest */
        GeneralAIRequest: {
            /** Input */
            input: Record<string, never>;
            /** Llm Config Id */
            llm_config_id?: number | null;
            /** Prompt Name */
            prompt_name?: string | null;
            /** Response Model Name */
            response_model_name?: string | null;
            /** Response Model Schema */
            response_model_schema?: Record<string, never> | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LLMConfigCreate */
        LLMConfigCreate: {
            /** Provider */
            provider: string;
            /** Display Name */
            display_name?: string | null;
            /** Model Name */
            model_name: string;
            /** Api Base */
            api_base?: string | null;
            /** Api Key */
            api_key?: string | null;
        };
        /** LLMConfigRead */
        LLMConfigRead: {
            /** Provider */
            provider: string;
            /** Display Name */
            display_name?: string | null;
            /** Model Name */
            model_name: string;
            /** Api Base */
            api_base?: string | null;
            /** Api Key */
            api_key?: string | null;
            /** Id */
            id: number;
        };
        /** LLMConfigUpdate */
        LLMConfigUpdate: {
            /** Provider */
            provider?: string | null;
            /** Display Name */
            display_name?: string | null;
            /** Model Name */
            model_name?: string | null;
            /** Api Base */
            api_base?: string | null;
            /** Api Key */
            api_key?: string | null;
        };
        /** LLMConnectionTest */
        LLMConnectionTest: {
            /** Provider */
            provider: string;
            /** Model Name */
            model_name: string;
            /** Api Base */
            api_base?: string | null;
            /** Api Key */
            api_key: string;
        };
        /** ProjectCreate */
        ProjectCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
        };
        /** ProjectRead */
        ProjectRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Id */
            id: number;
        };
        /** ProjectUpdate */
        ProjectUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
        };
        /** PromptCreate */
        PromptCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Template */
            template: string;
        };
        /** PromptRead */
        PromptRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Template */
            template: string;
            /** Id */
            id: number;
        };
        /** PromptUpdate */
        PromptUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Template */
            template?: string | null;
        };
        /**
         * Tags
         * @description 统一的标签模型，严格参考 primitive_models/Step1Model.py 中的 Tags 定义。
         */
        Tags: {
            /**
             * Theme
             * @description 主题类别，格式: 大类-子类
             * @default
             */
            theme: string;
            /**
             * Story Tags
             * @description 小说类别标签,每个标签带有权重(0.4-1.0)
             * @default []
             */
            story_tags: [
                string,
                number
            ][];
            /**
             * Affection
             * @description 情感关系标签
             * @default
             */
            affection: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_projects_endpoint_api_projects__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_List_ProjectRead__"];
                };
            };
        };
    };
    create_project_endpoint_api_projects__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ProjectRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_endpoint_api_projects__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ProjectRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_project_endpoint_api_projects__project_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ProjectRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_project_endpoint_api_projects__project_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_llm_configs_endpoint_api_llm_configs__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_List_LLMConfigRead__"];
                };
            };
        };
    };
    create_llm_config_endpoint_api_llm_configs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMConfigCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_LLMConfigRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_llm_config_endpoint_api_llm_configs__config_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMConfigUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_LLMConfigRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_llm_config_endpoint_api_llm_configs__config_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_llm_connection_endpoint_api_llm_configs_test_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMConnectionTest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_chapter_api_chapters__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChapterCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ChapterRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chapters_by_volume_api_chapters_by_volume__volume_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volume_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_List_ChapterRead__"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chapter_api_chapters__chapter_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ChapterRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_chapter_api_chapters__chapter_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChapterUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ChapterRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_chapter_endpoint_api_chapters__chapter_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_schemas_api_ai_schemas_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    get_content_models_api_ai_content_models_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    get_ai_config_options_api_ai_config_options_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    generate_ai_content_api_ai_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GeneralAIRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_continuation_api_ai_generate_continuation_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContinuationRequest"];
            };
        };
        responses: {
            /** @description 成功返回续写结果或事件流 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ContinuationResponse_"];
                    "text/event-stream": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_tags_model_api_ai_models_tags_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tags"];
                };
            };
        };
    };
    read_prompts_api_prompts__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_List_PromptRead__"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_prompt_api_prompts__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_PromptRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_prompt_api_prompts__prompt_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prompt_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_PromptRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_prompt_api_prompts__prompt_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prompt_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_PromptRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_prompt_api_prompts__prompt_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prompt_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_card_types_api_card_types_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTypeRead"][];
                };
            };
        };
    };
    create_card_type_api_card_types_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardTypeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTypeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_card_type_api_card_types__card_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_type_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTypeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_card_type_api_card_types__card_type_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_type_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardTypeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTypeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_card_type_api_card_types__card_type_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_type_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_cards_for_project_api_projects__project_id__cards_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_card_for_project_api_projects__project_id__cards_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_card_api_cards__card_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_card_api_cards__card_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_card_api_cards__card_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
