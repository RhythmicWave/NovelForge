/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Projects Endpoint */
        get: operations["get_projects_endpoint_api_projects__get"];
        put?: never;
        /** Create Project Endpoint */
        post: operations["create_project_endpoint_api_projects__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/free": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Free Project Endpoint */
        get: operations["get_free_project_endpoint_api_projects_free_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Project Endpoint */
        get: operations["get_project_endpoint_api_projects__project_id__get"];
        /** Update Project Endpoint */
        put: operations["update_project_endpoint_api_projects__project_id__put"];
        post?: never;
        /** Delete Project Endpoint */
        delete: operations["delete_project_endpoint_api_projects__project_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/llm-configs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Llm Configs Endpoint */
        get: operations["get_llm_configs_endpoint_api_llm_configs__get"];
        put?: never;
        /** Create Llm Config Endpoint */
        post: operations["create_llm_config_endpoint_api_llm_configs__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/llm-configs/{config_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Llm Config Endpoint */
        put: operations["update_llm_config_endpoint_api_llm_configs__config_id__put"];
        post?: never;
        /** Delete Llm Config Endpoint */
        delete: operations["delete_llm_config_endpoint_api_llm_configs__config_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/llm-configs/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 测试 LLM 连接
         * @description 使用传入参数临时构造一个 Agent 并发起一次最小调用以验证连通性。
         */
        post: operations["test_llm_connection_endpoint_api_llm_configs_test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/llm-configs/{config_id}/reset-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 重置统计（输入/输出token与调用次数清零） */
        post: operations["reset_llm_usage_api_llm_configs__config_id__reset_usage_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/schemas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 获取所有输出模型的JSON Schema（仅内置）
         * @description 返回内置 pydantic 模型的 schema 聚合，键为模型名称。
         */
        get: operations["get_all_schemas_api_ai_schemas_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/content-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取所有可用输出模型名称 */
        get: operations["get_content_models_api_ai_content_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/config-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 获取AI生成配置选项
         * @description 获取AI生成时可用的配置选项
         */
        get: operations["get_ai_config_options_api_ai_config_options_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/prompts/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 渲染并注入知识库的提示词模板 */
        get: operations["render_prompt_with_knowledge_api_ai_prompts_render_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 通用AI生成接口
         * @description 通用的AI内容生成端点：前端必须提供 response_model_schema。
         */
        post: operations["generate_ai_content_api_ai_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/generate/continuation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 续写正文 */
        post: operations["generate_continuation_api_ai_generate_continuation_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/models/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 导出 Tags 模型（用于类型生成） */
        get: operations["export_tags_model_api_ai_models_tags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 获取提示词列表
         * @description 获取所有提示词模板的列表。
         */
        get: operations["read_prompts_api_prompts__get"];
        put?: never;
        /**
         * 创建新提示词
         * @description 创建一个新的提示词模板。
         */
        post: operations["create_prompt_api_prompts__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/{prompt_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 获取单个提示词
         * @description 根据ID获取单个提示词模板的详细信息。
         */
        get: operations["read_prompt_api_prompts__prompt_id__get"];
        /**
         * 更新提示词
         * @description 更新一个已存在的提示词模板。
         */
        put: operations["update_prompt_api_prompts__prompt_id__put"];
        post?: never;
        /**
         * 删除提示词
         * @description 删除一个提示词模板。
         */
        delete: operations["delete_prompt_api_prompts__prompt_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/card-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Card Types */
        get: operations["get_all_card_types_api_card_types_get"];
        put?: never;
        /** Create Card Type */
        post: operations["create_card_type_api_card_types_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/card-types/{card_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Card Type */
        get: operations["get_card_type_api_card_types__card_type_id__get"];
        /** Update Card Type */
        put: operations["update_card_type_api_card_types__card_type_id__put"];
        post?: never;
        /** Delete Card Type */
        delete: operations["delete_card_type_api_card_types__card_type_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/card-types/{card_type_id}/schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Card Type Schema */
        get: operations["get_card_type_schema_api_card_types__card_type_id__schema_get"];
        /** Update Card Type Schema */
        put: operations["update_card_type_schema_api_card_types__card_type_id__schema_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/card-types/{card_type_id}/ai-params": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Card Type Ai Params */
        get: operations["get_card_type_ai_params_api_card_types__card_type_id__ai_params_get"];
        /** Update Card Type Ai Params */
        put: operations["update_card_type_ai_params_api_card_types__card_type_id__ai_params_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{project_id}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Cards For Project */
        get: operations["get_all_cards_for_project_api_projects__project_id__cards_get"];
        put?: never;
        /** Create Card For Project */
        post: operations["create_card_for_project_api_projects__project_id__cards_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cards/{card_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Card */
        get: operations["get_card_api_cards__card_id__get"];
        /** Update Card */
        put: operations["update_card_api_cards__card_id__put"];
        post?: never;
        /** Delete Card */
        delete: operations["delete_card_api_cards__card_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cards/{card_id}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Copy Card Endpoint */
        post: operations["copy_card_endpoint_api_cards__card_id__copy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cards/{card_id}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move Card Endpoint */
        post: operations["move_card_endpoint_api_cards__card_id__move_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cards/{card_id}/schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Card Schema */
        get: operations["get_card_schema_api_cards__card_id__schema_get"];
        /** Update Card Schema */
        put: operations["update_card_schema_api_cards__card_id__schema_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cards/{card_id}/schema/apply-to-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply Card Schema To Type */
        post: operations["apply_card_schema_to_type_api_cards__card_id__schema_apply_to_type_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cards/{card_id}/ai-params": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Card Ai Params */
        get: operations["get_card_ai_params_api_cards__card_id__ai_params_get"];
        /** Update Card Ai Params */
        put: operations["update_card_ai_params_api_cards__card_id__ai_params_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cards/{card_id}/ai-params/apply-to-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply Card Ai Params To Type */
        post: operations["apply_card_ai_params_to_type_api_cards__card_id__ai_params_apply_to_type_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/context/assemble": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 装配写作上下文（事实子图） */
        post: operations["assemble_api_context_assemble_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/memory/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 检索子图/快照 */
        post: operations["query_api_memory_query_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/memory/ingest-relations-llm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 使用 LLM 抽取实体关系并入图（严格） */
        post: operations["ingest_relations_llm_api_memory_ingest_relations_llm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/memory/extract-relations-llm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 仅抽取实体关系（不入图） */
        post: operations["extract_relations_only_api_memory_extract_relations_llm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/memory/extract-dynamic-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 仅提取动态信息（不更新） */
        post: operations["extract_dynamic_info_only_api_memory_extract_dynamic_info_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/memory/ingest-relations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 根据 RelationExtraction 结果入图 */
        post: operations["ingest_relations_from_preview_api_memory_ingest_relations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/memory/update-dynamic-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Dynamic Info
         * @description 接收前端预览并确认后的动态信息，执行更新。
         *     现在调用新的、更完整的服务函数。
         */
        post: operations["update_dynamic_info_api_memory_update_dynamic_info_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/foreshadow/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 伏笔候选建议（启发式占位） */
        post: operations["suggest_api_foreshadow_suggest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/foreshadow/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 列出项目的伏笔登记 */
        get: operations["list_items_api_foreshadow_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/foreshadow/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 登记一组伏笔条目 */
        post: operations["register_api_foreshadow_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/foreshadow/resolve/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 将伏笔标记为已回收 */
        post: operations["resolve_api_foreshadow_resolve__item_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/foreshadow/delete/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 删除伏笔条目 */
        post: operations["delete_api_foreshadow_delete__item_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/knowledge/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取知识库列表 */
        get: operations["list_knowledge_api_knowledge__get"];
        put?: never;
        /** 创建知识库 */
        post: operations["create_knowledge_api_knowledge__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/knowledge/{kid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取单个知识库 */
        get: operations["get_knowledge_api_knowledge__kid__get"];
        /** 更新知识库 */
        put: operations["update_knowledge_api_knowledge__kid__put"];
        post?: never;
        /** 删除知识库 */
        delete: operations["delete_knowledge_api_knowledge__kid__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取项目模板列表 */
        get: operations["list_templates_api_project_templates__get"];
        put?: never;
        /** 创建项目模板 */
        post: operations["create_template_api_project_templates__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-templates/{tid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取单个项目模板 */
        get: operations["get_template_api_project_templates__tid__get"];
        /** 更新项目模板 */
        put: operations["update_template_api_project_templates__tid__put"];
        post?: never;
        /** 删除项目模板 */
        delete: operations["delete_template_api_project_templates__tid__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Workflows */
        get: operations["list_workflows_api_workflows_get"];
        put?: never;
        /** Create Workflow */
        post: operations["create_workflow_api_workflows_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-triggers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Triggers
         * @description 返回所有工作流触发器列表（独立资源路径，避免与 /workflows/{workflow_id} 冲突）。
         */
        get: operations["list_triggers_api_workflow_triggers_get"];
        put?: never;
        /** Create Trigger */
        post: operations["create_trigger_api_workflow_triggers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-triggers/{trigger_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Trigger */
        put: operations["update_trigger_api_workflow_triggers__trigger_id__put"];
        post?: never;
        /** Delete Trigger */
        delete: operations["delete_trigger_api_workflow_triggers__trigger_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Workflow */
        get: operations["get_workflow_api_workflows__workflow_id__get"];
        /** Update Workflow */
        put: operations["update_workflow_api_workflows__workflow_id__put"];
        post?: never;
        /** Delete Workflow */
        delete: operations["delete_workflow_api_workflows__workflow_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run Workflow */
        post: operations["run_workflow_api_workflows__workflow_id__run_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/runs/{run_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Run */
        get: operations["get_run_api_workflows_runs__run_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate Workflow */
        post: operations["validate_workflow_api_workflows__workflow_id__validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/runs/{run_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel Run */
        post: operations["cancel_run_api_workflows_runs__run_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/runs/{run_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stream Events */
        get: operations["stream_events_api_workflows_runs__run_id__events_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Root */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ApiResponse */
        ApiResponse: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: unknown | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[ContinuationResponse] */
        ApiResponse_ContinuationResponse_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["ContinuationResponse"] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[KnowledgeRead] */
        ApiResponse_KnowledgeRead_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["KnowledgeRead"] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[LLMConfigRead] */
        ApiResponse_LLMConfigRead_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["LLMConfigRead"] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[List[KnowledgeRead]] */
        ApiResponse_List_KnowledgeRead__: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: components["schemas"]["KnowledgeRead"][] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[List[LLMConfigRead]] */
        ApiResponse_List_LLMConfigRead__: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: components["schemas"]["LLMConfigRead"][] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[List[ProjectRead]] */
        ApiResponse_List_ProjectRead__: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: components["schemas"]["ProjectRead"][] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[List[ProjectTemplateRead]] */
        ApiResponse_List_ProjectTemplateRead__: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: components["schemas"]["ProjectTemplateRead"][] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[List[PromptRead]] */
        ApiResponse_List_PromptRead__: {
            /**
             * Status
             * @default success
             */
            status: string;
            /** Data */
            data?: components["schemas"]["PromptRead"][] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[ProjectRead] */
        ApiResponse_ProjectRead_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["ProjectRead"] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[ProjectTemplateRead] */
        ApiResponse_ProjectTemplateRead_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["ProjectTemplateRead"] | null;
            /** Message */
            message?: string | null;
        };
        /** ApiResponse[PromptRead] */
        ApiResponse_PromptRead_: {
            /**
             * Status
             * @default success
             */
            status: string;
            data?: components["schemas"]["PromptRead"] | null;
            /** Message */
            message?: string | null;
        };
        /** AssembleContextRequest */
        AssembleContextRequest: {
            /**
             * Project Id
             * @description 项目ID
             */
            project_id?: number | null;
            /**
             * Volume Number
             * @description 卷号
             */
            volume_number?: number | null;
            /**
             * Chapter Number
             * @description 章节号
             */
            chapter_number?: number | null;
            /**
             * Chapter Id
             * @description 章节卡片ID（可选）
             */
            chapter_id?: number | null;
            /**
             * Participants
             * @description 参与实体名称列表
             */
            participants?: string[] | null;
            /**
             * Current Draft Tail
             * @description 上下文模板（草稿尾部）
             */
            current_draft_tail?: string | null;
            /**
             * Recent Chapters Window
             * @description 最近窗口N（保留，为将来扩展）
             */
            recent_chapters_window?: number | null;
        };
        /** AssembleContextResponse */
        AssembleContextResponse: {
            /**
             * Facts Subgraph
             * @description 事实子图的文本回显（可选，仅回显）
             * @default
             */
            facts_subgraph: string;
            /**
             * Budget Stats
             * @description 上下文字数预算统计（可能包含嵌套 parts dict）
             */
            budget_stats?: {
                [key: string]: unknown;
            };
            /** @description 结构化事实子图 */
            facts_structured?: components["schemas"]["FactsStructured"] | null;
        };
        /** CancelResponse */
        CancelResponse: {
            /** Ok */
            ok: boolean;
            /** Message */
            message?: string | null;
        };
        /** CardCopyOrMoveRequest */
        CardCopyOrMoveRequest: {
            /** Target Project Id */
            target_project_id: number;
            /** Parent Id */
            parent_id?: number | null;
        };
        /** CardCreate */
        CardCreate: {
            /** Title */
            title: string;
            /** Model Name */
            model_name?: string | null;
            /** Content */
            content?: {
                [key: string]: unknown;
            } | null;
            /** Parent Id */
            parent_id?: number | null;
            /** Card Type Id */
            card_type_id: number;
            /** Json Schema */
            json_schema?: {
                [key: string]: unknown;
            } | null;
            /** Ai Params */
            ai_params?: {
                [key: string]: unknown;
            } | null;
        };
        /** CardRead */
        CardRead: {
            /** Title */
            title: string;
            /** Model Name */
            model_name?: string | null;
            /** Content */
            content?: {
                [key: string]: unknown;
            } | null;
            /** Parent Id */
            parent_id?: number | null;
            /** Card Type Id */
            card_type_id: number;
            /** Json Schema */
            json_schema?: {
                [key: string]: unknown;
            } | null;
            /** Ai Params */
            ai_params?: {
                [key: string]: unknown;
            } | null;
            /** Id */
            id: number;
            /** Project Id */
            project_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Display Order */
            display_order: number;
            card_type: components["schemas"]["CardTypeRead"];
            /** Ai Context Template */
            ai_context_template?: string | null;
        };
        /** CardTypeCreate */
        CardTypeCreate: {
            /** Name */
            name: string;
            /** Model Name */
            model_name?: string | null;
            /** Description */
            description?: string | null;
            /** Json Schema */
            json_schema?: {
                [key: string]: unknown;
            } | null;
            /** Ai Params */
            ai_params?: {
                [key: string]: unknown;
            } | null;
            /** Editor Component */
            editor_component?: string | null;
            /**
             * Is Ai Enabled
             * @default false
             */
            is_ai_enabled: boolean;
            /**
             * Is Singleton
             * @default false
             */
            is_singleton: boolean;
            /** Default Ai Context Template */
            default_ai_context_template?: string | null;
            /** Ui Layout */
            ui_layout?: {
                [key: string]: unknown;
            } | null;
        };
        /** CardTypeRead */
        CardTypeRead: {
            /** Name */
            name: string;
            /** Model Name */
            model_name?: string | null;
            /** Description */
            description?: string | null;
            /** Json Schema */
            json_schema?: {
                [key: string]: unknown;
            } | null;
            /** Ai Params */
            ai_params?: {
                [key: string]: unknown;
            } | null;
            /** Editor Component */
            editor_component?: string | null;
            /**
             * Is Ai Enabled
             * @default false
             */
            is_ai_enabled: boolean;
            /**
             * Is Singleton
             * @default false
             */
            is_singleton: boolean;
            /** Default Ai Context Template */
            default_ai_context_template?: string | null;
            /** Ui Layout */
            ui_layout?: {
                [key: string]: unknown;
            } | null;
            /** Id */
            id: number;
            /**
             * Built In
             * @default false
             */
            built_in: boolean;
        };
        /** CardTypeUpdate */
        CardTypeUpdate: {
            /** Name */
            name?: string | null;
            /** Model Name */
            model_name?: string | null;
            /** Description */
            description?: string | null;
            /** Json Schema */
            json_schema?: {
                [key: string]: unknown;
            } | null;
            /** Ai Params */
            ai_params?: {
                [key: string]: unknown;
            } | null;
            /** Editor Component */
            editor_component?: string | null;
            /** Is Ai Enabled */
            is_ai_enabled?: boolean | null;
            /** Is Singleton */
            is_singleton?: boolean | null;
            /** Default Ai Context Template */
            default_ai_context_template?: string | null;
            /** Ui Layout */
            ui_layout?: {
                [key: string]: unknown;
            } | null;
        };
        /** CardUpdate */
        CardUpdate: {
            /** Title */
            title?: string | null;
            /** Model Name */
            model_name?: string | null;
            /** Content */
            content?: {
                [key: string]: unknown;
            } | null;
            /** Parent Id */
            parent_id?: number | null;
            /** Display Order */
            display_order?: number | null;
            /** Ai Context Template */
            ai_context_template?: string | null;
            /** Json Schema */
            json_schema?: {
                [key: string]: unknown;
            } | null;
            /** Ai Params */
            ai_params?: {
                [key: string]: unknown;
            } | null;
        };
        /** ContinuationRequest */
        ContinuationRequest: {
            /** Previous Content */
            previous_content: string;
            /** Llm Config Id */
            llm_config_id: number;
            /**
             * Stream
             * @default false
             */
            stream: boolean;
            /** Project Id */
            project_id?: number | null;
            /** Volume Number */
            volume_number?: number | null;
            /** Chapter Number */
            chapter_number?: number | null;
            /** Participants */
            participants?: string[] | null;
            /**
             * Temperature
             * @description 采样温度 0-2，留空使用模型默认
             */
            temperature?: number | null;
            /**
             * Max Tokens
             * @description 生成的最大token数，留空使用默认
             */
            max_tokens?: number | null;
            /**
             * Timeout
             * @description 生成超时(秒)，留空使用默认
             */
            timeout?: number | null;
            /**
             * Current Draft Tail
             * @description 上下文模板，将在装配阶段作为草稿尾部注入
             */
            current_draft_tail?: string | null;
            /**
             * Prompt Name
             * @description 参数卡选择的提示词名称
             */
            prompt_name?: string | null;
            /**
             * Append Continuous Novel Directive
             * @description 是否追加连续小说正文指令
             * @default true
             */
            append_continuous_novel_directive: boolean;
        };
        /** ContinuationResponse */
        ContinuationResponse: {
            /** Content */
            content: string;
        };
        /** DeletionInfo */
        DeletionInfo: {
            /**
             * Name
             * @description 角色名称。
             */
            name: string;
            /**
             * Dynamic Type
             * @description 动态信息类型。
             * @enum {string}
             */
            dynamic_type: "系统/模拟器/金手指信息" | "等级/修为境界" | "装备/法宝" | "知识/情报" | "资产/领地" | "功法/技能" | "血脉/体质" | "心理想法/目标快照";
            /**
             * Id
             * @description 要删除的动态信息的ID (不能为-1)
             */
            id: number;
        };
        /** DynamicInfo */
        DynamicInfo: {
            /**
             * Name
             * @description 角色名称。
             */
            name: string;
            /**
             * Dynamic Info
             * @description 动态信息字典，键为中文类别；值为信息项列表。
             */
            dynamic_info?: {
                [key: string]: components["schemas"]["DynamicInfoItem"][];
            };
        };
        /** DynamicInfoItem */
        DynamicInfoItem: {
            /**
             * Id
             * @description 手动设置，无需生成；并入时若为-1将自动赋值为该类别的顺序序号（从1开始）
             * @default -1
             */
            id: number;
            /**
             * Info
             * @description 简要描述具体动态信息。
             */
            info: string;
        };
        /** ExtractOnlyRequest */
        ExtractOnlyRequest: {
            /** Project Id */
            project_id?: number | null;
            /** Text */
            text: string;
            /** Participants */
            participants?: components["schemas"]["ParticipantTyped"][] | null;
            /**
             * Llm Config Id
             * @default 1
             */
            llm_config_id: number;
            /** Timeout */
            timeout?: number | null;
            /** Extra Context */
            extra_context?: string | null;
        };
        /** ExtractRelationsRequest */
        ExtractRelationsRequest: {
            /** Text */
            text: string;
            /** Participants */
            participants?: components["schemas"]["ParticipantTyped"][] | null;
            /**
             * Llm Config Id
             * @default 1
             */
            llm_config_id: number;
            /** Timeout */
            timeout?: number | null;
            /** Volume Number */
            volume_number?: number | null;
            /** Chapter Number */
            chapter_number?: number | null;
        };
        /** FactsStructured */
        FactsStructured: {
            /**
             * Fact Summaries
             * @description 关键事实摘要
             */
            fact_summaries?: string[];
            /**
             * Relation Summaries
             * @description 关系摘要（含近期对话/事件）
             */
            relation_summaries?: components["schemas"]["RelationItem"][];
        };
        /** ForeshadowDeleteRequest */
        ForeshadowDeleteRequest: {
            /** Project Id */
            project_id: number;
        };
        /** ForeshadowItem */
        ForeshadowItem: {
            /** Id */
            id?: number | null;
            /** Project Id */
            project_id: number;
            /** Chapter Id */
            chapter_id?: number | null;
            /** Title */
            title: string;
            /**
             * Type
             * @default other
             */
            type: string;
            /** Note */
            note?: string | null;
            /**
             * Status
             * @default open
             */
            status: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Resolved At */
            resolved_at?: string | null;
        };
        /** ForeshadowListResponse */
        ForeshadowListResponse: {
            /** Items */
            items: components["schemas"]["ForeshadowItem"][];
        };
        /** ForeshadowRegisterItem */
        ForeshadowRegisterItem: {
            /** Title */
            title: string;
            /**
             * Type
             * @description goal|item|person|other
             * @default other
             */
            type: string;
            /** Note */
            note?: string | null;
            /** Chapter Id */
            chapter_id?: number | null;
        };
        /** ForeshadowRegisterRequest */
        ForeshadowRegisterRequest: {
            /** Project Id */
            project_id: number;
            /** Items */
            items: components["schemas"]["ForeshadowRegisterItem"][];
        };
        /** ForeshadowResolveRequest */
        ForeshadowResolveRequest: {
            /** Project Id */
            project_id: number;
        };
        /** GeneralAIRequest */
        GeneralAIRequest: {
            /** Input */
            input: {
                [key: string]: unknown;
            };
            /** Llm Config Id */
            llm_config_id?: number | null;
            /** Prompt Name */
            prompt_name?: string | null;
            /** Response Model Name */
            response_model_name?: {
                [key: string]: unknown;
            } | string | null;
            /** Response Model Schema */
            response_model_schema?: {
                [key: string]: unknown;
            } | null;
            /**
             * Temperature
             * @description 采样温度 0-2，留空使用模型默认
             */
            temperature?: number | null;
            /**
             * Max Tokens
             * @description 生成的最大token数，留空使用默认
             */
            max_tokens?: number | null;
            /**
             * Timeout
             * @description 生成超时(秒)，留空使用默认
             */
            timeout?: number | null;
            /**
             * Deps
             * @description 依赖注入数据(JSON字符串)，例如实体名称列表等
             */
            deps?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** IngestRelationsFromPreviewRequest */
        IngestRelationsFromPreviewRequest: {
            /** Project Id */
            project_id: number;
            data: components["schemas"]["RelationExtraction-Input"];
            /** Volume Number */
            volume_number?: number | null;
            /** Chapter Number */
            chapter_number?: number | null;
        };
        /** IngestRelationsFromPreviewResponse */
        IngestRelationsFromPreviewResponse: {
            /** Written */
            written: number;
        };
        /** IngestRelationsLLMRequest */
        IngestRelationsLLMRequest: {
            /** Project Id */
            project_id: number;
            /** Text */
            text: string;
            /** Participants */
            participants?: components["schemas"]["ParticipantTyped"][] | null;
            /**
             * Llm Config Id
             * @default 1
             */
            llm_config_id: number;
            /** Timeout */
            timeout?: number | null;
            /** Volume Number */
            volume_number?: number | null;
            /** Chapter Number */
            chapter_number?: number | null;
        };
        /** IngestRelationsLLMResponse */
        IngestRelationsLLMResponse: {
            /** Written */
            written: number;
        };
        /** KnowledgeCreate */
        KnowledgeCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Content */
            content: string;
        };
        /** KnowledgeRead */
        KnowledgeRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Content */
            content: string;
            /**
             * Built In
             * @default false
             */
            built_in: boolean;
            /** Id */
            id: number;
        };
        /** KnowledgeUpdate */
        KnowledgeUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Content */
            content?: string | null;
        };
        /** LLMConfigCreate */
        LLMConfigCreate: {
            /** Provider */
            provider: string;
            /** Display Name */
            display_name?: string | null;
            /** Model Name */
            model_name: string;
            /** Api Base */
            api_base?: string | null;
            /** Api Key */
            api_key?: string | null;
            /**
             * Token Limit
             * @default -1
             */
            token_limit: number | null;
            /**
             * Call Limit
             * @default -1
             */
            call_limit: number | null;
            /**
             * Rpm Limit
             * @default -1
             */
            rpm_limit: number | null;
            /**
             * Tpm Limit
             * @default -1
             */
            tpm_limit: number | null;
            /**
             * Used Tokens Input
             * @default 0
             */
            used_tokens_input: number | null;
            /**
             * Used Tokens Output
             * @default 0
             */
            used_tokens_output: number | null;
            /**
             * Used Calls
             * @default 0
             */
            used_calls: number | null;
        };
        /** LLMConfigRead */
        LLMConfigRead: {
            /** Provider */
            provider: string;
            /** Display Name */
            display_name?: string | null;
            /** Model Name */
            model_name: string;
            /** Api Base */
            api_base?: string | null;
            /** Api Key */
            api_key?: string | null;
            /**
             * Token Limit
             * @default -1
             */
            token_limit: number | null;
            /**
             * Call Limit
             * @default -1
             */
            call_limit: number | null;
            /**
             * Rpm Limit
             * @default -1
             */
            rpm_limit: number | null;
            /**
             * Tpm Limit
             * @default -1
             */
            tpm_limit: number | null;
            /**
             * Used Tokens Input
             * @default 0
             */
            used_tokens_input: number | null;
            /**
             * Used Tokens Output
             * @default 0
             */
            used_tokens_output: number | null;
            /**
             * Used Calls
             * @default 0
             */
            used_calls: number | null;
            /** Id */
            id: number;
        };
        /** LLMConfigUpdate */
        LLMConfigUpdate: {
            /** Provider */
            provider?: string | null;
            /** Display Name */
            display_name?: string | null;
            /** Model Name */
            model_name?: string | null;
            /** Api Base */
            api_base?: string | null;
            /** Api Key */
            api_key?: string | null;
            /** Token Limit */
            token_limit?: number | null;
            /** Call Limit */
            call_limit?: number | null;
            /** Rpm Limit */
            rpm_limit?: number | null;
            /** Tpm Limit */
            tpm_limit?: number | null;
            /** Used Tokens Input */
            used_tokens_input?: number | null;
            /** Used Tokens Output */
            used_tokens_output?: number | null;
            /** Used Calls */
            used_calls?: number | null;
        };
        /** LLMConnectionTest */
        LLMConnectionTest: {
            /** Provider */
            provider: string;
            /** Model Name */
            model_name: string;
            /** Api Base */
            api_base?: string | null;
            /** Api Key */
            api_key: string;
        };
        /** ParticipantTyped */
        ParticipantTyped: {
            /** Name */
            name: string;
            /** Type */
            type: string;
        };
        /** ProjectCreate */
        ProjectCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Template Id */
            template_id?: number | null;
        };
        /** ProjectRead */
        ProjectRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Id */
            id: number;
        };
        /** ProjectTemplateCreate */
        ProjectTemplateCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Built In
             * @default false
             */
            built_in: boolean;
            /**
             * Items
             * @default []
             */
            items: components["schemas"]["ProjectTemplateItemCreate"][];
        };
        /** ProjectTemplateItemCreate */
        ProjectTemplateItemCreate: {
            /** Card Type Id */
            card_type_id: number;
            /**
             * Display Order
             * @default 0
             */
            display_order: number;
            /** Title Override */
            title_override?: string | null;
        };
        /** ProjectTemplateItemRead */
        ProjectTemplateItemRead: {
            /** Card Type Id */
            card_type_id: number;
            /**
             * Display Order
             * @default 0
             */
            display_order: number;
            /** Title Override */
            title_override?: string | null;
            /** Id */
            id: number;
        };
        /** ProjectTemplateRead */
        ProjectTemplateRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Built In
             * @default false
             */
            built_in: boolean;
            /** Id */
            id: number;
            /**
             * Items
             * @default []
             */
            items: components["schemas"]["ProjectTemplateItemRead"][];
        };
        /** ProjectTemplateUpdate */
        ProjectTemplateUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Items */
            items?: components["schemas"]["ProjectTemplateItemCreate"][] | null;
        };
        /** ProjectUpdate */
        ProjectUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
        };
        /** PromptCreate */
        PromptCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Template */
            template: string;
        };
        /** PromptRead */
        PromptRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Template */
            template: string;
            /** Id */
            id: number;
            /**
             * Built In
             * @default false
             */
            built_in: boolean;
        };
        /** PromptUpdate */
        PromptUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Template */
            template?: string | null;
        };
        /** QueryRequest */
        QueryRequest: {
            /** Project Id */
            project_id: number;
            /** Participants */
            participants?: string[] | null;
            /**
             * Radius
             * @default 2
             */
            radius: number;
        };
        /** QueryResponse */
        QueryResponse: {
            /** Nodes */
            nodes: {
                [key: string]: unknown;
            }[];
            /** Edges */
            edges: {
                [key: string]: unknown;
            }[];
            /** Fact Summaries */
            fact_summaries: string[];
            /** Relation Summaries */
            relation_summaries: {
                [key: string]: unknown;
            }[];
        };
        /** RecentEventSummary */
        RecentEventSummary: {
            /**
             * Summary
             * @description A、B 之间近期发生事件的一句摘要（本次提取建议融合为一条）
             */
            summary: string;
            /**
             * Volume Number
             * @description 发生的卷号（置空，系统可补全）
             */
            volume_number?: number | null;
            /**
             * Chapter Number
             * @description 发生的章节号（置空，系统可补全）
             */
            chapter_number?: number | null;
        };
        /** RelationExtraction */
        "RelationExtraction-Input": {
            /** Relations */
            relations?: components["schemas"]["RelationItem"][];
        };
        /** RelationExtraction */
        "RelationExtraction-Output": {
            /** Relations */
            relations?: components["schemas"]["RelationItem"][];
        };
        /** RelationItem */
        RelationItem: {
            /**
             * A
             * @description 实体 A 名称（参与者之一）
             */
            a: string;
            /**
             * B
             * @description 实体 B 名称（参与者之一）
             */
            b: string;
            /**
             * Kind
             * @description 关系类型（中文）
             * @enum {string}
             */
            kind: "同盟" | "队友" | "同门" | "敌对" | "亲属" | "师徒" | "对手" | "伙伴" | "上级" | "下属" | "指导" | "隶属" | "成员" | "领导" | "创立" | "控制" | "位于" | "影响" | "克制" | "关于" | "其他";
            /**
             * Description
             * @description 对该关系的简要文字说明（可选）
             */
            description?: string | null;
            /**
             * A To B Addressing
             * @description A 对 B 的称呼词，如：师兄、先生。仅当 A, B 均为角色时提取。
             */
            a_to_b_addressing?: string | null;
            /**
             * B To A Addressing
             * @description B 对 A 的称呼词。仅当 A, B 均为角色时提取。
             */
            b_to_a_addressing?: string | null;
            /**
             * Recent Dialogues
             * @description 近期对话片段（建议包含双方各至少一句，可用 A:“…”, B:“…” 合并片段；长度≥20字）。仅当 A, B 均为角色时提取。
             */
            recent_dialogues?: string[];
            /**
             * Recent Event Summaries
             * @description 近期 A 与 B 直接发生在彼此之间的事件；若同一事实涉及三方或以上，仅在最直接的一对上记录一次。优先记录角色-角色的配对；当事件主体确系 A 与 B 为角色-组织/组织-组织时再记录相应关系，避免将组织背景误当作双边事件。
             */
            recent_event_summaries?: components["schemas"]["RecentEventSummary"][];
            /**
             * Stance
             * @description A 对 B 的总体立场（可选）
             */
            stance?: ("友好" | "中立" | "敌意") | null;
        };
        /** RunRequest */
        RunRequest: {
            /** Scope Json */
            scope_json?: {
                [key: string]: unknown;
            } | null;
            /** Params Json */
            params_json?: {
                [key: string]: unknown;
            } | null;
            /** Idempotency Key */
            idempotency_key?: string | null;
        };
        /** SuggestRequest */
        SuggestRequest: {
            /**
             * Text
             * @description 待分析文本
             */
            text: string;
        };
        /** SuggestResponse */
        SuggestResponse: {
            /** Goals */
            goals: string[];
            /** Items */
            items: string[];
            /** Persons */
            persons: string[];
        };
        /**
         * Tags
         * @description 统一的标签模型。
         */
        Tags: {
            /**
             * Theme
             * @description 主题类别，格式: 大类-子类
             * @default
             */
            theme: string;
            /**
             * Audience
             * @description 读者频道分类（男频/女频）
             * @default 男频
             * @enum {string}
             */
            audience: "男频" | "女频";
            /**
             * Narrative Person
             * @description 写作人称（第一人称/第三人称）
             * @default 第三人称
             * @enum {string}
             */
            narrative_person: "第一人称" | "第三人称";
            /**
             * Story Tags
             * @description 类别标签及权重档位（低/中/高）
             * @default []
             */
            story_tags: [
                string,
                "低权重" | "中权重" | "高权重"
            ][];
            /**
             * Affection
             * @description 情感关系标签
             * @default
             */
            affection: string;
        };
        /** UpdateDynamicInfo */
        "UpdateDynamicInfo-Input": {
            /**
             * Info List
             * @description 需要更新的动态信息列表，尽量只提取足够重要的信息
             */
            info_list: components["schemas"]["DynamicInfo"][];
            /**
             * Delete Info List
             * @description （可选）为新增信息腾出空间而要删除的旧信息列表
             */
            delete_info_list?: components["schemas"]["DeletionInfo"][] | null;
        };
        /** UpdateDynamicInfo */
        "UpdateDynamicInfo-Output": {
            /**
             * Info List
             * @description 需要更新的动态信息列表，尽量只提取足够重要的信息
             */
            info_list: components["schemas"]["DynamicInfo"][];
            /**
             * Delete Info List
             * @description （可选）为新增信息腾出空间而要删除的旧信息列表
             */
            delete_info_list?: components["schemas"]["DeletionInfo"][] | null;
        };
        /** UpdateDynamicInfoRequest */
        UpdateDynamicInfoRequest: {
            /** Project Id */
            project_id: number;
            data: components["schemas"]["UpdateDynamicInfo-Input"];
            /**
             * Queue Size
             * @default 5
             */
            queue_size: number | null;
        };
        /** UpdateDynamicInfoResponse */
        UpdateDynamicInfoResponse: {
            /** Success */
            success: boolean;
            /** Updated Card Count */
            updated_card_count: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WorkflowCreate */
        WorkflowCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean | null;
            /**
             * Is Built In
             * @default false
             */
            is_built_in: boolean | null;
            /**
             * Version
             * @default 1
             */
            version: number | null;
            /**
             * Dsl Version
             * @default 1
             */
            dsl_version: number | null;
            /** Definition Json */
            definition_json?: {
                [key: string]: unknown;
            } | null;
        };
        /** WorkflowRead */
        WorkflowRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean | null;
            /**
             * Is Built In
             * @default false
             */
            is_built_in: boolean | null;
            /**
             * Version
             * @default 1
             */
            version: number | null;
            /**
             * Dsl Version
             * @default 1
             */
            dsl_version: number | null;
            /** Definition Json */
            definition_json?: {
                [key: string]: unknown;
            } | null;
            /** Id */
            id: number;
        };
        /** WorkflowRunRead */
        WorkflowRunRead: {
            /** Id */
            id: number;
            /** Workflow Id */
            workflow_id: number;
            /** Definition Version */
            definition_version: number;
            /** Status */
            status: string;
            /** Scope Json */
            scope_json?: {
                [key: string]: unknown;
            } | null;
            /** Params Json */
            params_json?: {
                [key: string]: unknown;
            } | null;
            /** Idempotency Key */
            idempotency_key?: string | null;
            /** Summary Json */
            summary_json?: {
                [key: string]: unknown;
            } | null;
            /** Error Json */
            error_json?: {
                [key: string]: unknown;
            } | null;
        };
        /** WorkflowTriggerCreate */
        WorkflowTriggerCreate: {
            /** Workflow Id */
            workflow_id: number;
            /** Trigger On */
            trigger_on: string;
            /** Card Type Name */
            card_type_name?: string | null;
            /** Filter Json */
            filter_json?: {
                [key: string]: unknown;
            } | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean | null;
        };
        /** WorkflowTriggerRead */
        WorkflowTriggerRead: {
            /** Workflow Id */
            workflow_id: number;
            /** Trigger On */
            trigger_on: string;
            /** Card Type Name */
            card_type_name?: string | null;
            /** Filter Json */
            filter_json?: {
                [key: string]: unknown;
            } | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean | null;
            /** Id */
            id: number;
        };
        /** WorkflowTriggerUpdate */
        WorkflowTriggerUpdate: {
            /** Trigger On */
            trigger_on?: string | null;
            /** Card Type Name */
            card_type_name?: string | null;
            /** Filter Json */
            filter_json?: {
                [key: string]: unknown;
            } | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /** WorkflowUpdate */
        WorkflowUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /** Version */
            version?: number | null;
            /** Dsl Version */
            dsl_version?: number | null;
            /** Definition Json */
            definition_json?: {
                [key: string]: unknown;
            } | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_projects_endpoint_api_projects__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_List_ProjectRead__"];
                };
            };
        };
    };
    create_project_endpoint_api_projects__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ProjectRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_free_project_endpoint_api_projects_free_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ProjectRead_"];
                };
            };
        };
    };
    get_project_endpoint_api_projects__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ProjectRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_project_endpoint_api_projects__project_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ProjectRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_project_endpoint_api_projects__project_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_llm_configs_endpoint_api_llm_configs__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_List_LLMConfigRead__"];
                };
            };
        };
    };
    create_llm_config_endpoint_api_llm_configs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMConfigCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_LLMConfigRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_llm_config_endpoint_api_llm_configs__config_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMConfigUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_LLMConfigRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_llm_config_endpoint_api_llm_configs__config_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_llm_connection_endpoint_api_llm_configs_test_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMConnectionTest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_llm_usage_api_llm_configs__config_id__reset_usage_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_schemas_api_ai_schemas_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_content_models_api_ai_content_models_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    get_ai_config_options_api_ai_config_options_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    render_prompt_with_knowledge_api_ai_prompts_render_get: {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_ai_content_api_ai_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GeneralAIRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_continuation_api_ai_generate_continuation_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContinuationRequest"];
            };
        };
        responses: {
            /** @description 成功返回续写结果或事件流 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ContinuationResponse_"];
                    "text/event-stream": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_tags_model_api_ai_models_tags_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tags"];
                };
            };
        };
    };
    read_prompts_api_prompts__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_List_PromptRead__"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_prompt_api_prompts__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_PromptRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_prompt_api_prompts__prompt_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prompt_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_PromptRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_prompt_api_prompts__prompt_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prompt_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_PromptRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_prompt_api_prompts__prompt_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prompt_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_card_types_api_card_types_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTypeRead"][];
                };
            };
        };
    };
    create_card_type_api_card_types_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardTypeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTypeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_card_type_api_card_types__card_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_type_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTypeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_card_type_api_card_types__card_type_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_type_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardTypeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTypeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_card_type_api_card_types__card_type_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_type_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_card_type_schema_api_card_types__card_type_id__schema_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_type_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_card_type_schema_api_card_types__card_type_id__schema_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_type_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_card_type_ai_params_api_card_types__card_type_id__ai_params_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_type_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_card_type_ai_params_api_card_types__card_type_id__ai_params_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_type_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_cards_for_project_api_projects__project_id__cards_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_card_for_project_api_projects__project_id__cards_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_card_api_cards__card_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_card_api_cards__card_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_card_api_cards__card_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    copy_card_endpoint_api_cards__card_id__copy_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardCopyOrMoveRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    move_card_endpoint_api_cards__card_id__move_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardCopyOrMoveRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_card_schema_api_cards__card_id__schema_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_card_schema_api_cards__card_id__schema_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    apply_card_schema_to_type_api_cards__card_id__schema_apply_to_type_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_card_ai_params_api_cards__card_id__ai_params_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_card_ai_params_api_cards__card_id__ai_params_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    apply_card_ai_params_to_type_api_cards__card_id__ai_params_apply_to_type_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                card_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assemble_api_context_assemble_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssembleContextRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssembleContextResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    query_api_memory_query_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ingest_relations_llm_api_memory_ingest_relations_llm_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngestRelationsLLMRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IngestRelationsLLMResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    extract_relations_only_api_memory_extract_relations_llm_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtractRelationsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationExtraction-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    extract_dynamic_info_only_api_memory_extract_dynamic_info_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtractOnlyRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateDynamicInfo-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ingest_relations_from_preview_api_memory_ingest_relations_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngestRelationsFromPreviewRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IngestRelationsFromPreviewResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_dynamic_info_api_memory_update_dynamic_info_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDynamicInfoRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateDynamicInfoResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suggest_api_foreshadow_suggest_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SuggestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuggestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_items_api_foreshadow_list_get: {
        parameters: {
            query: {
                project_id: number;
                status?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForeshadowListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_api_foreshadow_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForeshadowRegisterRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForeshadowListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resolve_api_foreshadow_resolve__item_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForeshadowResolveRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForeshadowItem"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_api_foreshadow_delete__item_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForeshadowDeleteRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_knowledge_api_knowledge__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_List_KnowledgeRead__"];
                };
            };
        };
    };
    create_knowledge_api_knowledge__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KnowledgeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_KnowledgeRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_knowledge_api_knowledge__kid__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                kid: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_KnowledgeRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_knowledge_api_knowledge__kid__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                kid: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KnowledgeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_KnowledgeRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_knowledge_api_knowledge__kid__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                kid: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_templates_api_project_templates__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_List_ProjectTemplateRead__"];
                };
            };
        };
    };
    create_template_api_project_templates__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectTemplateCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ProjectTemplateRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_template_api_project_templates__tid__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tid: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ProjectTemplateRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_template_api_project_templates__tid__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tid: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectTemplateUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ProjectTemplateRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_template_api_project_templates__tid__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tid: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_workflows_api_workflows_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRead"][];
                };
            };
        };
    };
    create_workflow_api_workflows_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_triggers_api_workflow_triggers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTriggerRead"][];
                };
            };
        };
    };
    create_trigger_api_workflow_triggers_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowTriggerCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTriggerRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_trigger_api_workflow_triggers__trigger_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trigger_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowTriggerUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTriggerRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_trigger_api_workflow_triggers__trigger_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trigger_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workflow_api_workflows__workflow_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_workflow_api_workflows__workflow_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_workflow_api_workflows__workflow_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_workflow_api_workflows__workflow_id__run_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RunRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_run_api_workflows_runs__run_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                run_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_workflow_api_workflows__workflow_id__validate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_run_api_workflows_runs__run_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                run_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_events_api_workflows_runs__run_id__events_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                run_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
